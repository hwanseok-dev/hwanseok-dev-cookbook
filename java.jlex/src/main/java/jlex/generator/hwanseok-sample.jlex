/*
 *  @(#) YyLex.java
 *  Copyright 2003 the original author or authors. 
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License"); 
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License. 
 *  
 *   This source, generated by JLex(https://www.cs.princeton.edu/~appel/modern/java/JLex/)
 */
 package share.formula;

class YyToken {
	public final static int FUNCTION = 91;

	/**
	 * BASE_VAL 이후의 번호는 값들을 의미한다. BASE_VAL 이하의 토큰들은 오퍼랜드들을 갖는 토큰들이다.
	 */
	public final static int BASE_VAL = 100;
	public final static int NULL = 101;
	public final static int BOOLEAN = 102;
	public final static int DECIMAL = 103;
	public final static int REAL = 104;
	public final static int OBJECT = 105;
	public final static int STRING = 106;

	public final static int VARIABLE = 120;

	public final static int PHRENTHESIS_OPEN = 50;
	public final static int PHRENTHESIS_CLOSE = 51;
	public final static int BRACKET_OPEN = 1001;
	public final static int BRACKET_CLOSE = 1002;
	public final static int COMMA = 1003;

	
  YyToken(int index, Object value) {
	this.index = index;
	this.value = value;
  }
 
  public int index;
  public Object value;

  public String toString() {
      return "YyToken #"+index+": "+value;
  }
  public boolean equals(Object o) {
        if (o instanceof YyToken) {
            YyToken param = (YyToken) o;
            return (param.index == this.index) && (this.value.equals(param.value));
        } else {
            return false;
        }
  }
  public int hashCode() {
        return toString().hashCode();
  }

}

%%

%class YyLex
%type YyToken
%{
  private int comment_count = 0;
%} 
%line
%char
%unicode
%state COMMENT
%yylexthrow{
Exception
%yylexthrow}


ALPHA=[A-Za-z]
DIGIT=[0-9]
NONNEWLINE_WHITE_SPACE_CHAR=[\ \t\b\012]
WHITE_SPACE_CHAR=[\n\r\ \t\b\012]
STRING_TEXT=(\\\"|[^\n\"\']|\\{WHITE_SPACE_CHAR}+\\)*
COMMENT_TEXT=([^/*\n]|[^*\n]"/"[^*\n]|[^/\n]"*"[^/\n]|"*"[^/\n]|"/"[^*\n])*


%% 

<YYINITIAL> "*" { return (new YyToken(0,yytext())); }
<YYINITIAL> "/" { return (new YyToken(1,yytext())); }
<YYINITIAL> "%" { return (new YyToken(2,yytext())); }
<YYINITIAL> "+" { return (new YyToken(10,yytext())); }
<YYINITIAL> "-" { return (new YyToken(11,yytext())); }
<YYINITIAL> "<"  { return (new YyToken(20,yytext())); }
<YYINITIAL> ">"  { return (new YyToken(21,yytext())); }
<YYINITIAL> "<=" { return (new YyToken(22,yytext())); }
<YYINITIAL> ">=" { return (new YyToken(23,yytext())); }
<YYINITIAL> "==" { return (new YyToken(30,yytext())); }
<YYINITIAL> "!=" { return (new YyToken(31,yytext())); }
<YYINITIAL> "&&" { return (new YyToken(40,yytext())); }
<YYINITIAL> "||" { return (new YyToken(41,yytext())); }
<YYINITIAL> "?" { return (new YyToken(42,yytext())); }
<YYINITIAL> ":" { return (new YyToken(43,yytext())); }
<YYINITIAL> "(" { return (new YyToken(50,yytext())); }
<YYINITIAL> ")" { return (new YyToken(51,yytext())); }



<YYINITIAL> {WHITE_SPACE_CHAR}+ { }

<YYINITIAL,COMMENT> \n { }

<YYINITIAL> "/*" { yybegin(COMMENT); comment_count = comment_count + 1; }

<COMMENT> "/*" { comment_count = comment_count + 1; }
<COMMENT> "*/" { 
	comment_count = comment_count - 1; 
	if(comment_count < 0)
	   throw new Exception("Invalid Comment");

	if (comment_count == 0) {
    		yybegin(YYINITIAL);
	}
}
<COMMENT> {COMMENT_TEXT} { }

<YYINITIAL> "," { return (new YyToken(1003,yytext())); }
<YYINITIAL>  ({ALPHA}|_|\$)({ALPHA}|{DIGIT}|_|\$|\.)*{WHITE_SPACE_CHAR}*\( { return ( new YyToken(YyToken.FUNCTION,yytext()) );}

<YYINITIAL> "null" { return (new YyToken(YyToken.NULL,yytext())); }

<YYINITIAL> \"{STRING_TEXT}\"|'{STRING_TEXT}' {	return (new YyToken(YyToken.STRING, yytext().substring(1,yytext().length() - 1))); }
<YYINITIAL> \"{STRING_TEXT} { throw new Exception("Unclosed String : "+yytext()); } 
<YYINITIAL> "true"|"false" { return (new YyToken(YyToken.BOOLEAN, new Boolean(yytext()))); }
<YYINITIAL> {DIGIT}+\.{DIGIT}+ { return (new YyToken(YyToken.REAL, new Double(yytext())));}	
<YYINITIAL> {DIGIT}+           { return (new YyToken(YyToken.DECIMAL, new Long(yytext())));}	
<YYINITIAL> ({ALPHA}|_|\$)({ALPHA}|{DIGIT}|_|\$)*\.({ALPHA}|_|\$)({ALPHA}|{DIGIT}|_|\$)* { return (new YyToken(YyToken.VARIABLE ,yytext()));}	
<YYINITIAL> ({ALPHA}|_|\$)({ALPHA}|{DIGIT}|_|\$)*  { return (new YyToken(YyToken.VARIABLE ,yytext()));}	
<YYINITIAL,COMMENT> . {	throw new Exception("Illegal character : "+yytext());}







